import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    
//      * Complete the 'breakingRecords' function below.
//      *
//      * The function is expected to return an INTEGER_ARRAY.
//      * The function accepts INTEGER_ARRAY scores as parameter.
    

    public static List<Integer> breakingRecords(List<Integer> scores) {
    // Write your code here
    int min=scores.get(0);                // first i just take scores[0] as min, max both and then for counting i declare the two var.
    int max=scores.get(0);
    int minCount=0,maxCount=0;
    for(int i=0;i<scores.size();i++)      // traversed from 0 to end to check the condition if match then switch with it  
    {
        if(min>scores.get(i))
        {
            min=scores.get(i);
            minCount++;
        }
        else if(max<scores.get(i))
        {
            max=scores.get(i);
            maxCount++;
        }
    }
    ArrayList<Integer>arr=new ArrayList<Integer>();
    arr.add(maxCount);
    arr.add(minCount);
    return arr;
      
}
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String[] scoresTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> scores = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int scoresItem = Integer.parseInt(scoresTemp[i]);
            scores.add(scoresItem);
        }

        List<Integer> result = Result.breakingRecords(scores);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
